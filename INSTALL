=======================================
Email Archive Installation Instructions
=======================================


General Instructions for Deployment of a New Release
====================================================


 1. In order to fetch a new release of the django mail archive code, simply
    check out the appropriate tag from svn::

      svn co https://tools.ietf.org/svn/tools/mailarch/tags/$releasenumber

 2. Don't forget to copy $releasenumber/mlarchive/settings/secrets.json from the
    old release to the new one; otherwise things won't work!
    ::

      cp $oldreleasenumber/mlarchive/settings/secrets.json $releasenumber/mlarchive/settings/

 3. Change into the directory of the new release::

      cd $releasenumber

    Optionally set up a Python virtual environment::

      python3 -m venv env 
      source env/bin/activate               

 4. Install requirements (make sure your pip is reasonably fresh first).
    The following will install required python modules locally if you
    are using a virtualenv, or globally if you are not::

      pip install -I -r requirements.txt

 5. Run migrations::

      cd backend
      export PYTHONPATH=$PWD 
      django-admin.py migrate --settings=mlarchive.settings.production

 6. Move static files to the appropriate direcrory::

      django-admin.py collectstatic --settings=mlarchive.settings.production

 7. Then re-point the 'current' symlink::

      cd ..
      rm ./current; ln -s $releasenumber current

 8. Restart apache::

      systemctl restart apache2.service

 9. It's now also a good idea to go to the mailarchive front page:

      http://mailarchive.ietf.org/

    to check that it's alive and kicking, and displaying the new release
    number at the bottom of the page

 10. If things **aren't** cool, revert the symlink step, re-pointing the
    symlink to the release that was running before the new release, and restart
    apache again to roll back to that.


Installing from Scratch
=======================

EXTERNAL DEPENDENCIES
=====================
Python 2.7
MySQL 5.6
Elasticsearch 6.4
Memcached 1.4
RabbitMQ Server 3.5

DEPENDENCIES PROVIDED BY PYTHON VIRTUAL ENV
===========================================
Celery 4.2
Django 1.11
Haystack 2.6.0 (Included)


Prerequisites
-------------
1. Install and configure Elasticsearch
requires Java 1.8 (java -version)
zypper addrepo -f https://artifacts.elastic.co/packages/6.x/yum
zypper install elasticsearch
edit /etc/elasticsearch/elasticsearch.yml
  - set path.data and path.repo
systemctl daemon-reload
systemctl enable elasticsearch.service
systemctl start elasticsearch.service


2. Install and configure RabbitMQ
zypper install rabbitmq-server
zypper install rabbitmq-server-plugins
rabbitmq-plugins enable rabbitmq_management
systemctl enable rabbitmq-server
systemctl start rabbitmq-server
systemctl status rabbitmq-server

see: http://www.rabbitmq.com/man/rabbitmqctl.1.man.html


SETUP:
The following steps will refer to INSTALL_DIR (ie. /a/mailarch/ )

1. Download software via SVN checkout (use appropriate version)
cd INSTALL_DIR
svn checkout https://svn.tools.ietf.org/svn/tools/mailarch/tags/N.N.N


2. Create a symlink to the release directory
ln -s N.N.N current


3. Create (or copy) INSTALL_DIR/current/backend/mlarchive/settings/secrets.json
which contains production settings.  It should contain the following 
settings: 

Example:
{
    "FILENAME": "secrets.json",
    "SECRET_KEY": [DJANGO SECRET KEY],
    "DATABASES_NAME": "archive",
    "DATABASES_TEST_NAME": "archive_test",
    "DATABASES_USER": [USER],
    "DATABASES_PASSWORD": [PASSORD],
    "HTAUTH_PASSWD_FILENAME": [PATH TO FILE]
}


4. Sample Apache Configuration

        RemoveHandler cgi-script .py
        Alias /static/ /a/mailarch/current/backend/static/

        WSGIScriptAlias / /a/mailarch/current/backend/mlarchive/productions.wsgi
        WSGIApplicationGroup %{GLOBAL}
        WSGIProcessGroup mailarchive.ietf.org

        <Directory /a/mailarch>
            #Order allow,deny
            #Allow from all
            Options FollowSymLinks
        </Directory>

        <Directory /a/mailarch/current/backend/static>
            Order allow,deny
            Allow from all
        </Directory>

        <Directory /a/mailarch/current/backend/mlarchive>
        <Files wsgi.py>
            Order deny,allow
            Allow from all
        </Files>
        </Directory>


5. Configure mailmain

copy INSTALL_DIR/current/backend/mlarchive/bin/call-archives.py /a/ietf/scripts

/a/mailman/Mailman/mm_cfg:
PUBLIC_EXTERNAL_ARCHIVER = '/a/ietf/scripts/call-archives.py %(listname)s --public'
PRIVATE_EXTERNAL_ARCHIVER = '/a/ietf/scripts/call-archives.py %(listname)s --private'

Modify ARCHIVE ALIASES in /a/postfix/aliases

ietfarch-atompub-archive:               "|/a/ietf/scripts/archive-mail atompub"

-> 

ietfarch-atompub-archive:               "|/a/ietf/scripts/call-archives atompub"


6. Install Cronscripts


7. Setup Celery service
Celery is provided in the Python virtual environment. What remains is to copy
systemd files into place and enable/start the service.
INSTALL_DIR=/a/mailarch

cp INSTALL_DIR/current/backend/celery/celeryd.service /etc/systemd/system
cp INSTALL_DIR/current/backend/celery/celeryd /etc/default/
mkdir /var/log/celery (wwwrun:www)
mkdir /var/run/celery (wwwrun:www)
systemctl enable celeryd
systemctl start celeryd

-- Test Status --
systemctl status celeryd
INSTALL_DIR/current/env/bin/celery status

** NOTE ** Celery will fail to start unless 
/var/log/mail-archive/mlarchive.log exists and is writable

