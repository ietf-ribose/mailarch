=======================================
Email Archive Installation Instructions
=======================================

1. Simple Development Setup
2. General Instructions for Deployment of a New Release
3. Installing from scratch



1. Simple development setup
===========================

Prerequisites
-------------
- Python 3.6
- Subversion client
- Chromedriver *
- Docker & Docker Compose

* required for selenium tests
  https://sites.google.com/a/chromium.org/chromedriver/home


1.1 Checkout the source code using subversion:

    svn co https://tools.ietf.org/svn/tools/mailarch/trunk

1.2 Setup .env configuration file

    cd trunk
    cp .env.sample .env
    
    - make changes as needed
    DEBUG=True
    SECRET_KEY=
    DATA_ROOT= (mkdir owner wwwrun:www)
    LOG_DIR= (mkdir owner wwwrun:www)
    DATABASES_NAME=db
    DATABASES_USER=root
    DATABASES_PASSWORD=[password]
    DOCKER_MYSQL_ROOT_PASSWORD=[same password] 
    ALLOWED_HOSTS= (add dev server)

    ** DO NOT USE THIS SETUP IN PRODUCTION

1.2.1
    
    link .env file to backend/mlarchive/settings/.env

1.3 Setup Python virtual environment

    python3 -m venv env
    source env/bin/activate
    pip install -r requirements.txt

1.4 Setup Containers

    docker-compose up -d

1.5 Run Tests 

    cd backend
    export PYTHONPATH=$PWD
    cd mlarchive
    pytest tests -v

1.6 Run Initial Migration

    cd ..
    ./manage.py migrate

1.7 Load messages
  
    1.7.1 Mbox file

        ./manage.py load [filename] -l [listname]

    1.7.2 Individual message

        mlarchive/bin/archive-mail.py [listname] < [message file]

1.8 Runserver

    ./manage.py runserver [HOST:PORT]



2. General Instructions for Deployment of a New Release
=======================================================


 2.1 In order to fetch a new release of the django mail archive code, simply
    check out the appropriate tag from svn::

      svn co https://tools.ietf.org/svn/tools/mailarch/tags/$releasenumber

 2.2 Don't forget to copy $releasenumber/mlarchive/settings/.env from the
    old release to the new one; otherwise things won't work!
    ::

      cp $oldreleasenumber/mlarchive/settings/.env $releasenumber/mlarchive/settings/

 2.3 Change into the directory of the new release::

      cd $releasenumber

    Optionally set up a Python virtual environment::

      python3 -m venv env 
      source env/bin/activate               

 2.4 Install requirements (make sure your pip is reasonably fresh first).
    The following will install required python modules locally if you
    are using a virtualenv, or globally if you are not::

      pip install -I -r requirements.txt

 2.5 Run migrations::

      cd backend
      export PYTHONPATH=$PWD 
      manage.py migrate

 2.6 Move static files to the appropriate direcrory::

      manage.py collectstatic

 2.7 Then re-point the 'current' symlink::

      cd ..
      rm ./current; ln -s $releasenumber current

 2.8 Restart apache::

      systemctl restart apache2.service

 2.9 It's now also a good idea to go to the mailarchive front page:

      http://mailarchive.ietf.org/

    to check that it's alive and kicking, and displaying the new release
    number at the bottom of the page

 If things **aren't** cool, revert the symlink step, re-pointing the
 symlink to the release that was running before the new release, and restart
 apache again to roll back to that.


3. Installing from Scratch
==========================

Production Setup


EXTERNAL DEPENDENCIES
=====================
Python 3.6
MySQL 5.6
Elasticsearch 6.8
Memcached 1.4
RabbitMQ Server 3.5


Prerequisites
-------------
1. Install and configure Elasticsearch
requires Java 1.8 (java -version)
zypper addrepo -f https://artifacts.elastic.co/packages/6.x/yum
zypper install elasticsearch
edit /etc/elasticsearch/elasticsearch.yml
  - set path.data and path.repo
systemctl daemon-reload
systemctl enable elasticsearch.service
systemctl start elasticsearch.service


2. Install and configure RabbitMQ
zypper install rabbitmq-server
zypper install rabbitmq-server-plugins
rabbitmq-plugins enable rabbitmq_management
systemctl enable rabbitmq-server
systemctl start rabbitmq-server
systemctl status rabbitmq-server

see: http://www.rabbitmq.com/man/rabbitmqctl.1.man.html


SETUP:
The following steps will refer to INSTALL_DIR (ie. /a/mailarch/ )

1. Download software via SVN checkout (use appropriate version)
cd INSTALL_DIR
svn checkout https://svn.tools.ietf.org/svn/tools/mailarch/tags/N.N.N


2. Create a symlink to the release directory
ln -s N.N.N current


3. Create (or copy) INSTALL_DIR/current/backend/mlarchive/settings/.env
   See INSTALL_DIR/.env.sample


4. Sample Apache Configuration

        RemoveHandler cgi-script .py
        Alias /static/ /a/mailarch/current/backend/static/

        WSGIScriptAlias / /a/mailarch/current/backend/mlarchive/wsgi.py
        WSGIApplicationGroup %{GLOBAL}
        WSGIProcessGroup mailarchive.ietf.org

        <Directory /a/mailarch>
            #Order allow,deny
            #Allow from all
            Options FollowSymLinks
        </Directory>

        <Directory /a/mailarch/current/backend/static>
            Order allow,deny
            Allow from all
        </Directory>

        <Directory /a/mailarch/current/backend/mlarchive>
        <Files wsgi.py>
            Order deny,allow
            Allow from all
        </Files>
        </Directory>


5. Configure mailmain

copy INSTALL_DIR/current/backend/mlarchive/bin/call-archives.py /a/ietf/scripts

/a/mailman/Mailman/mm_cfg:
PUBLIC_EXTERNAL_ARCHIVER = '/a/ietf/scripts/call-archives.py %(listname)s --public'
PRIVATE_EXTERNAL_ARCHIVER = '/a/ietf/scripts/call-archives.py %(listname)s --private'

Modify ARCHIVE ALIASES in /a/postfix/aliases

ietfarch-atompub-archive:               "|/a/ietf/scripts/archive-mail atompub"

-> 

ietfarch-atompub-archive:               "|/a/ietf/scripts/call-archives atompub"


6. Install Cronscripts


7. Setup Celery service
Celery is provided in the Python virtual environment. What remains is to copy
systemd files into place and enable/start the service.
INSTALL_DIR=/a/mailarch

cp INSTALL_DIR/current/backend/celery/celeryd.service /etc/systemd/system
cp INSTALL_DIR/current/backend/celery/celeryd /etc/default/
mkdir /var/log/celery (wwwrun:www)
mkdir /var/run/celery (wwwrun:www)
systemctl enable celeryd
systemctl start celeryd

-- Test Status --
systemctl status celeryd
INSTALL_DIR/current/env/bin/celery status

** NOTE ** Celery will fail to start unless 
/var/log/mail-archive/mlarchive.log exists and is writable

