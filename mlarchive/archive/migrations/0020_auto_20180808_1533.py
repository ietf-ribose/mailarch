# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-08-08 15:33
from __future__ import unicode_literals, print_function

import email
import os

from django.db import migrations
from django.conf import settings

from mlarchive.archive.management.commands._classes import lookup_extension, get_content_disposition
from mlarchive.archive.models import is_attachment
from mlarchive.utils.encoding import get_filename


def get_attachment_path(msg):
    path = os.path.join(settings.ARCHIVE_DIR, msg.email_list.name, '_attachments')
    if not os.path.exists(path):
        os.makedirs(path)
        os.chmod(path, 02777)
    return path


def get_body_raw(msg):
    try:
        with open(get_file_path(msg)) as f:
            return f.read()
    except IOError:
        error = 'Error reading message file: %s' % get_file_path(msg)
        print(error)
        return error


def get_file_path(msg):
    return os.path.join(
        settings.ARCHIVE_DIR,
        msg.email_list.name,
        msg.hashcode)


def process_attachments(apps, schema_editor):
    EmailList = apps.get_model("archive", "EmailList")
    Attachment = apps.get_model("archive", "Attachment")

    # delete all existing attachments
    print('Deleting existing attachments')
    Attachment.objects.all().delete()
    
    created = 0
    for elist in EmailList.objects.all().order_by('name'):
        print("Scanning {}".format(elist.name))

        for msg in elist.message_set.order_by('date'):
            message = email.message_from_string(get_body_raw(msg))
            for sequence, part in enumerate(message.walk()):
                if is_attachment(part):
                    filename = get_filename(part)
                    content_type = part.get_content_type()
                    content_disposition = get_content_disposition(part)
                    Attachment.objects.create(message=msg,
                                              description='',
                                              name=filename,
                                              content_type=content_type,
                                              content_disposition=content_disposition,
                                              filename='',      # old random disk fileneme
                                              sequence=sequence)
                    created = created + 1
    print('Total created: {}'.format(created))


def reverse_process_attachments(apps, schema_editor):
    Attachment = apps.get_model("archive", "Attachment")

    Attachment.objects.exclude(content_type='').update(content_type='', content_disposition='', sequence=1)


class Migration(migrations.Migration):

    dependencies = [
        ('archive', '0019_attachment_sequence'),
    ]

    operations = [
        migrations.RunPython(process_attachments, reverse_process_attachments),
    ]
