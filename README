DEVELOPMENT AND TESTING
-----------------------

What follows are instructions for setting up a development
environment on a Mac OSX.  These instructions were tested
on a MacBook Pro running OS X v10.9.1 (Mavericks).  

Prerequisites:
- MySQL 5.6
- Python 2.7
- Xcode
- virtualenv (ie. http://docs.python-guide.org/en/latest/dev/virtualenvs/)

Setup Xapian in VirtualEnv
--------------------------
From: http://nomad.coop/blog/installing-xapian-in-virtualenv-django/

(within activated virtualenv)
export VENV=$VIRTUAL_ENV
mkdir $VENV/packages && cd $VENV/packages

curl -O http://oligarchy.co.uk/xapian/1.2.17/xapian-core-1.2.17.tar.xz
curl -O http://oligarchy.co.uk/xapian/1.2.17/xapian-bindings-1.2.17.tar.xz

tar xzvf xapian-core-1.2.17.tar.xz
tar xzvf xapian-bindings-1.2.17.tar.xz

cd $VENV/packages/xapian-core-1.2.17
./configure --prefix=$VENV && make && make install

export LD_LIBRARY_PATH=$VENV/lib

cd $VENV/packages/xapian-bindings-1.2.17
./configure --prefix=$VENV --with-python && make && make install

Test:
python -c "import xapian" 


Install additional packages
---------------------------
$ pip install MySQL-python lxml six pyquery factory-boy pytest-django datetutil


Settings configuration
---------------------------
To setup to run the test suite modify settings_test.py:
Examples:
ARCHIVE_DIR = '/tmp/mailarch/data/archive/'
HAYSTACK_XAPIAN_PATH = '/tmp/mailarch/data/archive_index'
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.xapian_backend.XapianEngine',
        'PATH': '/tmp/mailarch/data/archive_index',
    },
}

similar changes should be made to settings_local.py


Running tests
---------------------------
- cd to root of working directory
- py.test tests


NOTES ON INFRASTRUCTURE
-----------------------

This section describes some of the parts of the system that aren't obvious.

1) How are records added to the index?

In settings.py is a setting:
HAYSTACK_SIGNAL_PROCESSOR = 'celery_haystack.signals.CelerySignalProcessor'

haystack/__init__.py uses this to setup Django signals to save records to the
index when models are saved.

CelerySignalProcessor: when objects are save checks to see if an index exists
for them.  If so calls task to update index.
